¡Entendido! Vamos a actualizar el manual para reflejar que los **manejadores de botones (button handlers)** están ubicados en el directorio `events/interactionUI/buttons`. Este manual cubrirá todo el sistema, incluyendo la creación de comandos slash, la configuración de embeds, el uso de `metroConfig` y `styles.json`, y la implementación de los manejadores de botones en la ubicación correcta.

---

## **Manual Completo: Sistema de Comandos, Embeds y Manejadores de Botones**

Este manual cubre todos los aspectos del sistema, incluyendo:

1. **Creación de comandos slash**.
2. **Configuración de embeds en `config/defaultEmbeds`**.
3. **Manejo de botones en `events/interactionUI/buttons`**.
4. **Uso de `metroConfig` y `styles.json`**.

---

### **1. Estructura del Proyecto**
Aquí está la estructura general del proyecto actualizada:

```
/proyecto
│
├── /config
│   ├── defaultEmbeds/          # Embeds predefinidos
│   ├── metroConfig.js          # Configuración del metro
│   └── styles.json            # Estilos y colores
│
├── /slashCommands             # Comandos slash
│   └── start.js               # Ejemplo de comando slash
│
├── /events
│   └── /interactionUI
│       └── /buttons           # Manejadores de botones
│           └── stationButtons.js
│
├── /utils
│   ├── cache.js                # Sistema de caché
│   └── utils.js                # Funciones útiles (crear botones, etc.)
│
└── bot.js                      # Archivo principal del bot
```

---

### **2. Creación de Comandos Slash**
Los comandos slash se definen en el directorio `slashCommands`. Cada comando es un archivo que exporta un objeto con dos propiedades: `data` y `execute`.

#### **Ejemplo: Comando `/start`**
```javascript
// slashCommands/start.js
const { SlashCommandBuilder } = require('discord.js');
const { createGeneralStationInfo } = require('../../config/defaultEmbeds/stationInfoEmbed');
const { setCache } = require('../../utils/cache');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('start')
        .setDescription('Muestra información de una estación.'),
    async execute(interaction) {
        // Datos de ejemplo de una estación
        const station = {
            name: 'Estación Ejemplo',
            original: 'Estación Ejemplo L1',
            status: { description: 'Operativa' },
            line: 1,
            transfer: 2,
            details: {
                accessibility: 'Accesible',
                amenities: ['Cafetería', 'Tienda'],
                municipality: 'Comuna 1',
                schematics: ['https://example.com/image.png'],
                mapLink: 'https://example.com/map',
            },
        };

        // Guardar los datos en la caché
        const embedId = `${interaction.user.id}_${interaction.id}`;
        setCache(interaction.user.id, embedId, { data: station });

        // Crear el embed con la información de la estación
        const { embed, buttons } = createGeneralStationInfo(station, interaction.user.id, interaction.id);

        // Responder con el embed y los botones
        await interaction.reply({ embeds: [embed], components: buttons });
    },
};
```

---

### **3. Configuración de Embeds**
Los embeds predefinidos se encuentran en `config/defaultEmbeds`. Estos archivos contienen funciones para crear embeds consistentes en toda la aplicación.

#### **Ejemplo: `stationInfoEmbed.js`**
```javascript
// config/defaultEmbeds/stationInfoEmbed.js
const { EmbedBuilder, ButtonStyle } = require('discord.js');
const { createButton, createActionRow } = require('../../utils/utils');

function createGeneralStationInfo(station, userId, interactionId) {
    const embed = new EmbedBuilder()
        .setTitle(`🚉 ${station.original}`)
        .setDescription(station.status.description)
        .addFields(
            { name: '🚉 Estado', value: station.status.description, inline: false },
            { name: '📏 Línea', value: `Línea ${station.line}`, inline: true },
            { name: '🔗 Conexiones', value: station.transfer ? `Transferencia a L${station.transfer}` : 'Ninguna', inline: true },
            { name: '♿ Accesibilidad', value: station.details.accessibility, inline: false },
            { name: '🏪 Comercios', value: station.details.amenities.join(', ') || 'Ninguno', inline: false },
            { name: '📍 Comuna', value: station.details.municipality, inline: true }
        )
        .setImage(station.details.schematics[0] || '')
        .setColor('#009688');

    const buttons = [
        createButton(
            `mainStation_${userId}_${interactionId}`,
            'Información General',
            ButtonStyle.Primary
        ),
        createButton(
            `surroundStation_${userId}_${interactionId}`,
            'Alrededores',
            ButtonStyle.Secondary
        ),
    ];

    if (station.transfer) {
        buttons.push(
            createButton(
                `transferStation_${userId}_${interactionId}`,
                'Combinar',
                ButtonStyle.Success
            )
        );
    }

    const actionRow = createActionRow(buttons);

    return { embed, buttons: [actionRow] };
}

module.exports = { createGeneralStationInfo };
```

---

### **4. Manejadores de Botones**
Los manejadores de botones están ubicados en `events/interactionUI/buttons`. Cada manejador es un archivo que exporta un arreglo de objetos, donde cada objeto representa un botón específico.

#### **Ejemplo: `stationButtons.js`**
```javascript
// events/interactionUI/buttons/stationButtons.js
const { createGeneralStationInfo, createStationSurroundings } = require('../../../config/defaultEmbeds/stationInfoEmbed');
const { getCache, deleteCache } = require('../../../utils/cache');
const logger = require('../../logger');

const BUTTON_TIMEOUT = 5 * 60 * 1000; // 5 minutos

module.exports = [
    {
        customId: 'mainStation_',
        async execute(interaction, client) {
            try {
                const [prefix, userId, interactionId] = interaction.customId.split('_');
                const embedId = `${userId}_${interactionId}`;
                const cachedData = getCache(userId, embedId);

                if (!cachedData) {
                    return await interaction.reply({ content: '❌ No se pudo cargar la información.', ephemeral: true });
                }

                const station = cachedData.data;
                const { embed, buttons } = createGeneralStationInfo(station, userId, interactionId);

                await interaction.editReply({ embeds: [embed], components: buttons });

                setTimeout(async () => {
                    try {
                        await interaction.editReply({ components: [] });
                        deleteCache(userId, embedId);
                        logger.info(`Botones y caché limpiados para ${embedId}`);
                    } catch (error) {
                        logger.error(`Error limpiando botones y caché: ${error.message}`);
                    }
                }, BUTTON_TIMEOUT);
            } catch (error) {
                console.error('❌ Error en mainStation_:', error);
                await interaction.followUp({ content: '❌ Ocurrió un error.', ephemeral: true });
            }
        },
    },
    // Más manejadores de botones...
];
```

---

### **5. Uso de `metroConfig` y `styles.json`**
Estos archivos contienen configuraciones y estilos que se utilizan en todo el sistema.

#### **`metroConfig.js`**
Contiene la configuración del metro, como los emojis de las líneas.

```javascript
// config/metroConfig.js
module.exports = {
    linesEmojis: {
        l1: '🚇', // Emoji para la Línea 1
        l2: '🚆', // Emoji para la Línea 2
        // Más líneas...
    },
};
```

#### **`styles.json`**
Contiene colores y estilos predefinidos para los embeds.

```json
// config/styles.json
{
    "defaultTheme": {
        "primaryColor": "#009688",
        "warningColor": "#FF5733",
        "successColor": "#4CAF50"
    }
}
```

---

### **6. Registro de Comandos y Manejadores**
En el archivo principal del bot (`bot.js`), registra los comandos slash y los manejadores de botones.

```javascript
// bot.js
const { Client, Events, GatewayIntentBits } = require('discord.js');
const { token } = require('./config.json');
const fs = require('fs');
const path = require('path');

const client = new Client({ intents: [GatewayIntentBits.Guilds] });

// Cargar comandos slash
client.commands = new Map();
const commandsPath = path.join(__dirname, 'slashCommands');
const commandFiles = fs.readdirSync(commandsPath).filter(file => file.endsWith('.js'));

for (const file of commandFiles) {
    const command = require(path.join(commandsPath, file));
    client.commands.set(command.data.name, command);
}

// Cargar manejadores de botones
const buttonHandlersPath = path.join(__dirname, 'events/interactionUI/buttons');
const buttonHandlerFiles = fs.readdirSync(buttonHandlersPath).filter(file => file.endsWith('.js'));

for (const file of buttonHandlerFiles) {
    const buttonHandlers = require(path.join(buttonHandlersPath, file));
    client.buttonHandlers = client.buttonHandlers || [];
    client.buttonHandlers.push(...buttonHandlers);
}

// Manejar interacciones
client.on(Events.InteractionCreate, async interaction => {
    if (interaction.isCommand()) {
        const command = client.commands.get(interaction.commandName);
        if (!command) return;
        await command.execute(interaction);
    } else if (interaction.isButton()) {
        for (const handler of client.buttonHandlers) {
            if (interaction.customId.startsWith(handler.customId)) {
                await handler.execute(interaction, client);
                break;
            }
        }
    }
});

client.login(token);
```

---

### **Resumen**
- **Comandos slash**: En `slashCommands`.
- **Embeds**: En `config/defaultEmbeds`.
- **Manejadores de botones**: En `events/interactionUI/buttons`.
- **Configuración**: `metroConfig.js` y `styles.json`.

Este manual te proporciona una guía completa para construir y organizar tu bot de Discord. ¡Si tienes más preguntas, no dudes en preguntar! 🚀