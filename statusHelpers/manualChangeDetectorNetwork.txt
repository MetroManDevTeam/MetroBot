### **Manual de Mantenimiento y Depuración para `presenceUpdater.js`**

Este manual proporciona una guía completa para el mantenimiento y depuración del módulo `presenceUpdater.js`. Incluye detalles sobre las variables esperadas, flujo de datos, y cómo solucionar problemas comunes.

---

## **Índice**

1. **Descripción del Módulo**

2. **Variables Esperadas**

3. **Flujo de Datos**

4. **Guía de Depuración**

5. **Problemas Comunes y Soluciones**

6. **Recomendaciones de Mantenimiento**

---

## **1. Descripción del Módulo**

El módulo `presenceUpdater.js` se encarga de actualizar el estado de presencia del bot de Discord (`Presence`) en función del estado actual de la red del Metro. Utiliza datos proporcionados por `changeDetector.js` y `metroDataHandler.js` para generar mensajes dinámicos que reflejan el estado de la red.

### **Funcionalidades Clave:**

- Actualiza el estado de presencia cada 30 segundos.

- Muestra mensajes personalizados según el estado de la red:

  - **Cierre por Horario**: Si todas las líneas/estaciones están en `estado 0`.

  - **Red Operativa**: Si todas las líneas/estaciones están en `estado 1`.

  - **Incidencias**: Si hay líneas o estaciones en `estado 2-5`.

  - **Mensajes Genéricos**: Mensajes predefinidos (e.g., "Próxima Estación: X").

- Ajusta dinámicamente los pesos de los mensajes según el estado de la red.

---

## **2. Variables Esperadas**

### **Variables de Configuración (`PRESENCE_CONFIG`):**

- **`updateInterval`**: Intervalo de tiempo (en milisegundos) para actualizar la presencia. Valor predeterminado: `30000` (30 segundos).

- **`messages.redInfo.baseWeight`**: Peso base para mostrar mensajes de incidencias. Valor predeterminado: `0.5`.

- **`messages.redInfo.operationalWeight`**: Peso para mensajes de incidencias cuando la red está operativa. Valor predeterminado: `0.25`.

- **`messages.generic`**: Lista de mensajes genéricos con sus pesos. Ejemplo:

  ```javascript

  { text: 'Próxima Estación: ', weight: 0.2 }

  ```

### **Variables de Entrada:**

- **`client`**: Objeto de cliente de Discord.js, proporcionado al llamar a `initializePresenceUpdates`.

- **`initialData`**: Datos iniciales de la red del Metro (opcional).

### **Variables de Salida:**

- **Estado de Presencia**: Mensajes generados dinámicamente para el estado de presencia del bot.

---

## **3. Flujo de Datos**

1. **Inicialización**:

   - Se llama a `initializePresenceUpdates(client, initialData)`.

   - Se configura un intervalo para actualizar la presencia cada `updateInterval`.

2. **Actualización de Presencia**:

   - Se llama a `buildStatusMessage()` para generar un mensaje basado en el estado de la red.

   - Se utiliza `changeDetector.getNetworkStatus()` para determinar el estado general de la red.

   - Se utiliza `changeDetector.getStatusSummary()` para obtener detalles sobre incidencias.

3. **Generación de Mensajes**:

   - Si la red está cerrada (`estado 0`), se muestra "Cierre por Horario".

   - Si la red está operativa (`estado 1`), se muestra "Toda la Red Operativa".

   - Si hay incidencias (`estado 2-5`), se selecciona un mensaje aleatorio del `statusSummary`.

   - Si no hay incidencias, se muestra un mensaje genérico.

4. **Actualización del Estado**:

   - Se actualiza el estado de presencia del bot usando `client.user.setPresence`.

---

## **4. Guía de Depuración**

### **Herramientas Recomendadas:**

- **Logs**: Use `logger.debug` y `logger.error` para rastrear el flujo de ejecución y errores.

- **Depuración en Tiempo Real**: Use un IDE como Visual Studio Code con breakpoints para inspeccionar variables.

### **Pasos para Depurar:**

1. **Verifique los Logs**:

   - Asegúrese de que los logs estén habilitados y revisar mensajes como `Updated presence to: [mensaje]` o `Failed to update presence: [error]`.

2. **Revise el Estado de la Red**:

   - Use `changeDetector.getNetworkStatus()` para verificar el estado actual de la red.

   - Use `changeDetector.getStatusSummary()` para inspeccionar las incidencias detectadas.

3. **Simule Estados de la Red**:

   - Modifique los datos de prueba en `metroDataHandler.js` para simular diferentes estados de la red (e.g., `estado 0`, `estado 1`, `estado 2-5`).

4. **Verifique los Mensajes Generados**:

   - Asegúrese de que `buildStatusMessage()` esté generando mensajes correctos para cada estado de la red.

---

## **5. Problemas Comunes y Soluciones**

### **Problema 1: El bot no actualiza su presencia.**

- **Causa**: El intervalo de actualización no se está ejecutando.

- **Solución**:

  - Verifique que `initializePresenceUpdates` se esté llamando correctamente.

  - Asegúrese de que el cliente de Discord esté conectado.

### **Problema 2: Los mensajes de incidencias no se muestran.**

- **Causa**: El peso (`weight`) para mensajes de incidencias es demasiado bajo.

- **Solución**:

  - Aumente `PRESENCE_CONFIG.messages.redInfo.baseWeight` o `operationalWeight`.

### **Problema 3: Mensajes genéricos no se muestran.**

- **Causa**: Los pesos de los mensajes genéricos no están bien configurados.

- **Solución**:

  - Verifique que la suma de los pesos en `PRESENCE_CONFIG.messages.generic` sea `1`.

### **Problema 4: El bot muestra "Red Metro de Santiago" en lugar de mensajes específicos.**

- **Causa**: No se encontraron incidencias ni mensajes genéricos válidos.

- **Solución**:

  - Revise que `changeDetector.getStatusSummary()` esté devolviendo datos correctos.

  - Asegúrese de que `getRandomStation()` esté funcionando correctamente.

---

## **6. Recomendaciones de Mantenimiento**

1. **Mantenga Actualizadas las Dependencias**:

   - Asegúrese de que `discord.js`, `logger`, `changeDetector`, y `metroDataHandler` estén actualizados.

2. **Pruebas Regulares**:

   - Simule diferentes estados de la red para asegurarse de que los mensajes se generen correctamente.

3. **Documentación de Cambios**:

   - Documente cualquier cambio en los pesos de los mensajes o la lógica de generación de mensajes.

4. **Monitoreo de Logs**:

   - Revise los logs regularmente para detectar errores o comportamientos inesperados.

5. **Optimización de Pesos**:

   - Ajuste los pesos de los mensajes (`baseWeight`, `operationalWeight`, y pesos genéricos) según las necesidades del proyecto.

---

### **Ejemplo de Configuración Final**

```javascript

const PRESENCE_CONFIG = {

    updateInterval: 30000,

    messages: {

        redInfo: { 

            baseWeight: 0.5,

            operationalWeight: 0.25

        },

        generic: [

            { text: 'Tómate siempre del pasamanos o manilla', weight: 0.05 },

            { text: 'Usa /help', weight: 0.05 },

            { text: 'Precaución: Se Inicia el Cierre de Puertas', weight: 0.05 },

            { text: 'Mantente detrás de la Línea Amarilla', weight: 0.05 },

            { text: 'Sáquenme de Baquedano', weight: 0.1 },

            { text: 'Próxima Estación: ', weight: 0.2 }

        ]

    }

};

```

---

¡Entendido! Vamos a añadir una sección detallada sobre el **diccionario `statusSummary`**, que es una parte clave del módulo `changeDetector.js` y se utiliza en `presenceUpdater.js` para generar mensajes de estado. Este diccionario es fundamental para entender cómo se estructuran los datos de incidencias y cómo se utilizan en el sistema.

---

## **7. Diccionario `statusSummary`**

El diccionario `statusSummary` es un objeto que contiene información sobre el estado actual de la red del Metro, incluyendo incidencias en líneas y estaciones. Su estructura es la siguiente:

### **Estructura del Diccionario:**

```javascript

{

    hasEstado0: boolean, // Indica si alguna línea o estación está en estado 0 (cierre por horario)

    messages: {

        [mensaje_app]: {

            lines: string[], // Líneas afectadas por este mensaje

            stations: {

                [línea]: string[] // Estaciones afectadas en una línea específica

            }

        }

    }

}

```

### **Campos Explicados:**

1. **`hasEstado0`**:

   - Tipo: `boolean`.

   - Descripción: Indica si alguna línea o estación está en `estado 0` (cierre por horario).

   - Ejemplo:

     ```javascript

     hasEstado0: true // Indica que la red está cerrada.

     ```

2. **`messages`**:

   - Tipo: `object`.

   - Descripción: Contiene mensajes de incidencias agrupados por `mensaje_app` (descripción de la incidencia).

   - Estructura:

     ```javascript

     {

         [mensaje_app]: {

             lines: string[], // Líneas afectadas por este mensaje

             stations: {

                 [línea]: string[] // Estaciones afectadas en una línea específica

             }

         }

     }

     ```

3. **`lines`**:

   - Tipo: `string[]`.

   - Descripción: Lista de líneas afectadas por el mensaje de incidencia.

   - Ejemplo:

     ```javascript

     lines: ["L1", "L5"] // Líneas L1 y L5 están afectadas.

     ```

4. **`stations`**:

   - Tipo: `object`.

   - Descripción: Estaciones afectadas agrupadas por línea.

   - Estructura:

     ```javascript

     {

         [línea]: string[] // Lista de estaciones afectadas en la línea

     }

     ```

   - Ejemplo:

     ```javascript

     stations: {

         "L1": ["San Pablo", "Los Héroes"], // Estaciones afectadas en L1

         "L5": ["Plaza de Maipú"] // Estaciones afectadas en L5

     }

     ```

---

### **Ejemplo Completo de `statusSummary`**

```javascript

{

    hasEstado0: false, // La red no está cerrada

    messages: {

        "Demora por mantención programada": {

            lines: ["L1", "L5"], // Líneas afectadas

            stations: {

                "L1": ["San Pablo", "Los Héroes"], // Estaciones afectadas en L1

                "L5": ["Plaza de Maipú"] // Estaciones afectadas en L5

            }

        },

        "Cierre temporal por manifestación": {

            lines: ["L2"], // Líneas afectadas

            stations: {

                "L2": ["Santa Ana", "Los Héroes"] // Estaciones afectadas en L2

            }

        }

    }

}

```

---

### **Cómo se Usa en `presenceUpdater.js`**

El diccionario `statusSummary` se utiliza en la función `buildStatusMessage()` para generar mensajes de estado dinámicos. Aquí hay un desglose de cómo se usa:

1. **Verificación de `hasEstado0`**:

   - Si `hasEstado0` es `true`, se muestra "Cierre por Horario".

2. **Verificación de `messages`**:

   - Si hay mensajes en `messages`, se selecciona uno aleatorio y se formatea:

     - Para líneas: `Línea X: [mensaje_app]`.

     - Para estaciones: `Línea X estaciones: [mensaje_app]`.

3. **Mensajes Genéricos**:

   - Si no hay incidencias (`messages` está vacío), se muestra un mensaje genérico.

---

### **Ejemplo de Uso en `buildStatusMessage()`**

```javascript

function buildStatusMessage() {

    const networkStatus = changeDetector.getNetworkStatus();

    const statusSummary = changeDetector.getStatusSummary();

    // Cierre por Horario

    if (networkStatus === 'closure') {

        return 'Cierre por Horario';

    }

    // Red Operativa

    if (networkStatus === 'operational') {

        return 'Toda la Red Operativa';

    }

    // Incidencias

    const messages = Object.entries(statusSummary.messages);

    if (messages.length > 0) {

        const [msgKey, msgData] = messages[Math.floor(Math.random() * messages.length)];

        

        // Prioriza líneas sobre estaciones

        if (msgData.lines.length > 0) {

            const line = msgData.lines[Math.floor(Math.random() * msgData.lines.length)];

            return `Línea ${line}: ${msgKey}`;

        }

        // Estaciones

        if (Object.keys(msgData.stations).length > 0) {

            const line = Object.keys(msgData.stations)[0];

            return `Línea ${line} estaciones: ${msgKey}`;

        }

    }

    // Mensajes genéricos

    const totalWeight = PRESENCE_CONFIG.messages.generic.reduce((sum, m) => sum + m.weight, 0);

    let random = Math.random() * totalWeight;

    for (const msg of PRESENCE_CONFIG.messages.generic) {

        if (random < msg.weight) {

            if (msg.text.startsWith('Próxima Estación')) {

                const station = getRandomStation();

                return station ? `${msg.text}${station}` : 'Red Metro de Santiago';

            }

            return msg.text;

        }

        random -= msg.weight;

    }

    return 'Red Metro de Santiago';

}

```

---

### **Resumen del Diccionario `statusSummary`**

- **Propósito**: Almacena información sobre incidencias en la red del Metro.

- **Estructura**: Agrupa líneas y estaciones afectadas por mensajes de incidencia (`mensaje_app`).

- **Uso**: Se utiliza en `presenceUpdater.js` para generar mensajes de estado dinámicos.

Este diccionario es esencial para entender cómo se gestionan y muestran las incidencias en el sistema. Si tienes más preguntas o necesitas más detalles, ¡no dudes en preguntar! 😊 

